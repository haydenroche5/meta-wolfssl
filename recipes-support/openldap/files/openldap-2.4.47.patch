diff --git a/configure.in b/configure.in
index 2134171..ca92592 100644
--- a/configure.in
+++ b/configure.in
@@ -188,6 +188,12 @@ AH_BOTTOM([
 #include "ac/assert.h"
 #include "ac/localize.h"
 
+#ifdef HAVE_WOLFSSL
+#define HAVE_OPENSSL
+#define HAVE_OPENSSL_CRL
+#define HAVE_OPENSSL_SSL_H
+#endif
+
 #endif /* _LDAP_PORTABLE_H */
 /* end of portable.h.post */
 ])
@@ -246,8 +252,8 @@ OL_ARG_WITH(fetch,[  --with-fetch		  with fetch(3) URL support],
 	auto, [auto yes no] )
 OL_ARG_WITH(threads,[  --with-threads	  with threads],
 	auto, [auto nt posix mach pth lwp yes no manual] )
-OL_ARG_WITH(tls,[  --with-tls		  with TLS/SSL support auto|openssl|gnutls|moznss],
-	auto, [auto openssl gnutls moznss yes no] )
+OL_ARG_WITH(tls,[  --with-tls		  with TLS/SSL support auto|openssl|gnutls|moznss|wolfssl],
+	auto, [auto openssl gnutls moznss wolfssl yes no] )
 OL_ARG_WITH(yielding_select,
 	[  --with-yielding-select  with implicitly yielding select],
 	auto, [auto yes no manual] )
@@ -1256,6 +1262,22 @@ if test $ol_link_tls = no ; then
 	fi
 fi
 
+dnl NOTE: caller must specify CPPFLAGS=-I/path/to/include/wolfssl/ to pick up
+dnl OpenSSL compatibility headers (e.g. /usr/local/include/wolfssl).
+if test $ol_link_tls = no ; then
+	if test $ol_with_tls = wolfssl || test $ol_with_tls = auto ; then
+		AC_CHECK_HEADERS([wolfssl/options.h])
+		if test "$ac_cv_header_wolfssl_options_h" = "yes"; then
+			ol_with_tls=wolfssl
+			ol_link_tls=yes
+			TLS_LIBS="-lwolfssl"
+			AC_DEFINE(HAVE_WOLFSSL, 1, [define if you have wolfSSL])
+		else
+			AC_MSG_ERROR([wolfSSL not found.])
+		fi
+	fi
+fi
+
 WITH_TLS=no
 if test $ol_link_tls = yes ; then
 	AC_DEFINE(HAVE_TLS, 1, [define if you have TLS])
diff --git a/libraries/libldap/tls2.c b/libraries/libldap/tls2.c
index d25c190..690a700 100644
--- a/libraries/libldap/tls2.c
+++ b/libraries/libldap/tls2.c
@@ -491,6 +491,10 @@ ldap_pvt_tls_get_peer_dn( void *s, struct berval *dn,
 
 	rc = ldap_X509dn2bv( &bvdn, dn, 
 			    (LDAPDN_rewrite_func *)func, flags);
+#ifdef HAVE_WOLFSSL
+	/* See comment in tlso_session_peer_dn. */
+	free(bvdn.bv_val);
+#endif
 	return rc;
 }
 
@@ -975,8 +979,13 @@ ldap_pvt_tls_get_my_dn( void *s, struct berval *dn, LDAPDN_rewrite_dummy *func,
 	int rc;
 
 	rc = tls_imp->ti_session_my_dn( session, &der_dn );
-	if ( rc == LDAP_SUCCESS )
+	if ( rc == LDAP_SUCCESS ) {
 		rc = ldap_X509dn2bv(&der_dn, dn, (LDAPDN_rewrite_func *)func, flags );
+#ifdef HAVE_WOLFSSL
+		/* See comment in tlso_session_peer_dn. */
+		free(der_dn.bv_val);
+#endif
+	}
 	return rc;
 }
 #endif /* HAVE_TLS */
diff --git a/libraries/libldap/tls_o.c b/libraries/libldap/tls_o.c
index b0277df..811401f 100644
--- a/libraries/libldap/tls_o.c
+++ b/libraries/libldap/tls_o.c
@@ -38,11 +38,16 @@
 #include "ldap-tls.h"
 
 #ifdef HAVE_OPENSSL_SSL_H
+#ifdef HAVE_WOLFSSL
+#include <wolfssl/options.h>
+#endif
 #include <openssl/ssl.h>
 #include <openssl/x509v3.h>
 #include <openssl/err.h>
 #include <openssl/rand.h>
+#ifndef HAVE_WOLFSSL
 #include <openssl/safestack.h>
+#endif
 #include <openssl/bn.h>
 #include <openssl/rsa.h>
 #include <openssl/dh.h>
@@ -119,7 +124,8 @@ static void tlso_thr_init( void ) {}
 #endif
 #endif /* OpenSSL 1.1 */
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+/* wolfSSL support the various BIO_* functions below. */
+#if OPENSSL_VERSION_NUMBER < 0x10100000 && !defined(HAVE_WOLFSSL)
 /*
  * OpenSSL 1.1 API and later makes the BIO method concrete types internal.
  */
@@ -156,6 +162,8 @@ BIO_meth_free( BIO_METHOD *meth )
 
 #endif /* OpenSSL 1.1 */
 
+/* See note at tlso_ca_list call site in tlso_ctx_init. */
+#ifndef HAVE_WOLFSSL
 static STACK_OF(X509_NAME) *
 tlso_ca_list( char * bundle, char * dir )
 {
@@ -181,6 +189,15 @@ tlso_ca_list( char * bundle, char * dir )
 #endif
 	return ca_list;
 }
+#endif
+
+#ifdef HAVE_WOLFSSL
+static void wolfSSL_logging_cb(const int logLevel, const char* const logMessage)
+{
+	(void)logLevel;
+	Debug(LDAP_DEBUG_ANY, "%s\n", logMessage, 0, 0);
+}
+#endif
 
 /*
  * Initialize TLS subsystem. Should be called only once.
@@ -208,8 +225,15 @@ tlso_init( void )
 	OPENSSL_init_ssl(0, NULL);
 #endif
 
+#ifndef HAVE_WOLFSSL
 	/* FIXME: mod_ssl does this */
 	X509V3_add_standard_extensions();
+#else
+	#ifdef DEBUG_WOLFSSL
+		wolfSSL_Debugging_ON();
+		wolfSSL_SetLoggingCb(wolfSSL_logging_cb);
+	#endif
+#endif
 
 	tlso_bio_method = tlso_bio_setup();
 
@@ -252,7 +276,8 @@ static void
 tlso_ctx_ref( tls_ctx *ctx )
 {
 	tlso_ctx *c = (tlso_ctx *)ctx;
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+/* wolfSSL supports SSL_CTX_up_ref via wolfSSL_CTX_up_ref. */
+#if OPENSSL_VERSION_NUMBER < 0x10100000 && !defined(HAVE_WOLFSSL)
 #define	SSL_CTX_up_ref(ctx)	CRYPTO_add( &(ctx->references), 1, CRYPTO_LOCK_SSL_CTX )
 #endif
 	SSL_CTX_up_ref( c );
@@ -314,12 +339,15 @@ tlso_ctx_init( struct ldapoptions *lo, struct ldaptls *lt, int is_server )
 	}
 
 	if ( lo->ldo_tls_cacertfile == NULL && lo->ldo_tls_cacertdir == NULL ) {
+	/* wolfSSL doesn't have default verify paths. */
+	#ifndef HAVE_WOLFSSL
 		if ( !SSL_CTX_set_default_verify_paths( ctx ) ) {
 			Debug( LDAP_DEBUG_ANY, "TLS: "
 				"could not use default certificate paths", 0, 0, 0 );
 			tlso_report_error();
 			return -1;
 		}
+	#endif
 	} else {
 		if ( !SSL_CTX_load_verify_locations( ctx,
 				lt->lt_cacertfile, lt->lt_cacertdir ) )
@@ -335,8 +363,43 @@ tlso_ctx_init( struct ldapoptions *lo, struct ldaptls *lt, int is_server )
 
 		if ( is_server ) {
 			STACK_OF(X509_NAME) *calist;
+/* tlso_ca_list calls SSL_add_dir_cert_subjects_to_stack, which wolfSSL hasn't
+ * implemented. However, since we've just added all the CA certs in
+ * lt->lt_cacertdir to the wolfSSL cert manager, we can just get them from
+ * there, which is what this #ifdef'd code does instead of tlso_ca_list. */
+#ifdef HAVE_WOLFSSL
+			WOLFSSL_CERT_MANAGER* cert_manager = NULL;
+			STACK_OF(X509)* certs = NULL;
+			X509* x509;
+			int i;
+
+			if ((cert_manager = wolfSSL_CTX_GetCertManager(ctx)) == NULL) {
+				Debug(LDAP_DEBUG_ANY, "TLS: could not get cert manager\n",
+						0, 0, 0 );
+				tlso_report_error();
+				return -1;
+			}
+
+			if ((certs = wolfSSL_CertManagerGetCerts(cert_manager)) == NULL) {
+				Debug(LDAP_DEBUG_ANY, "TLS: could not load certs from cert "
+						"manager\n", 0, 0, 0);
+				tlso_report_error();
+				return -1;
+			}
+
+			for (i = 0; i < sk_num(certs); ++i) {
+				x509 = sk_X509_value(certs, i);
+				if (X509_check_ca(x509) == 1) {
+					sk_X509_NAME_push(calist,
+						X509_get_subject_name(x509));
+				}
+			}
+
+			sk_X509_free(certs);
+#else
 			/* List of CA names to send to a client */
 			calist = tlso_ca_list( lt->lt_cacertfile, lt->lt_cacertdir );
+#endif
 			if ( !calist ) {
 				Debug( LDAP_DEBUG_ANY, "TLS: "
 					"could not load client CA list (file:`%s',dir:`%s').\n",
@@ -505,13 +568,25 @@ tlso_session_my_dn( tls_session *sess, struct berval *der_dn )
 	tlso_session *s = (tlso_session *)sess;
 	X509 *x;
 	X509_NAME *xn;
+#ifdef HAVE_WOLFSSL
+	int ret;
+	unsigned char *der_buf = NULL;
+#endif
 
 	x = SSL_get_certificate( s );
 
 	if (!x) return LDAP_INVALID_CREDENTIALS;
 	
 	xn = X509_get_subject_name(x);
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+#ifdef HAVE_WOLFSSL
+	/* der_buf is dynamically allocated, so callers of this function will need
+	   to free der_dn->bv_val. */
+	ret = i2d_X509_NAME(xn, &der_buf);
+	if (ret < 0)
+		return LDAP_INVALID_CREDENTIALS;
+	der_dn->bv_len = ret;
+	der_dn->bv_val = der_buf;
+#elif OPENSSL_VERSION_NUMBER < 0x10100000
 	der_dn->bv_len = i2d_X509_NAME( xn, NULL );
 	der_dn->bv_val = xn->bytes->data;
 #else
@@ -542,12 +617,24 @@ tlso_session_peer_dn( tls_session *sess, struct berval *der_dn )
 	tlso_session *s = (tlso_session *)sess;
 	X509 *x = tlso_get_cert( s );
 	X509_NAME *xn;
+#ifdef HAVE_WOLFSSL
+	unsigned char *der_buf = NULL;
+	int ret;
+#endif
 
 	if ( !x )
 		return LDAP_INVALID_CREDENTIALS;
 
 	xn = X509_get_subject_name(x);
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+#ifdef HAVE_WOLFSSL
+	/* der_buf is dynamically allocated, so callers of this function will need
+	   to free der_dn->bv_val. */
+	ret = i2d_X509_NAME(xn, &der_buf);
+	if (ret < 0)
+		return LDAP_INVALID_CREDENTIALS;
+	der_dn->bv_len = ret;
+	der_dn->bv_val = der_buf;
+#elif OPENSSL_VERSION_NUMBER < 0x10100000
 	der_dn->bv_len = i2d_X509_NAME( xn, NULL );
 	der_dn->bv_val = xn->bytes->data;
 #else
@@ -768,7 +855,8 @@ struct tls_data {
 	Sockbuf_IO_Desc		*sbiod;
 };
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000
+/* wolfSSL support the various BIO_* functions below. */
+#if OPENSSL_VERSION_NUMBER < 0x10100000 && !defined(HAVE_WOLFSSL)
 #define BIO_set_init(b, x)	b->init = x
 #define BIO_set_data(b, x)	b->ptr = x
 #define BIO_clear_flags(b, x)	b->flags &= ~(x)
