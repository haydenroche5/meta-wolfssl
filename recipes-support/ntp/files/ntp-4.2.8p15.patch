diff --git a/configure.ac b/configure.ac
index 5dc6aee..94aa248 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3011,49 +3011,65 @@ case "$ntp_libparse" in
 esac
 AC_MSG_RESULT([$ans])
 
-NTP_OPENSSL
-
-AC_MSG_CHECKING([if we want to enable CMAC support])
-case "$ac_cv_header_openssl_cmac_h" in
- yes)
-    AC_DEFINE([ENABLE_CMAC], [1], [Enable CMAC support?])
-    ans="yes"
-    ;;
- *) ans="no"
-    ;;
-esac
-AC_MSG_RESULT([$ans])
+NTP_WOLFSSL
+if test $USE_WOLFSSL = yes; then
+    AC_CHECK_HEADER([wolfssl/options.h])
+    if test $ac_cv_header_wolfssl_options_h = yes; then
+        AC_DEFINE([OPENSSL], [], [Use OpenSSL?])
+        AC_DEFINE([WITH_WOLFSSL], [], [Use wolfSSL?])
+        AC_DEFINE([ENABLE_CMAC], [1], [Enable CMAC support?])
+        AC_DEFINE([USE_OPENSSL_CRYPTO_RAND], [1], [Use OpenSSL's crypto random functions?])
+        AC_DEFINE([AUTOKEY], [1], [Support NTP Autokey protocol?])
+    else
+        AC_MSG_ERROR([Unable to find wolfssl.])
+    fi
+fi
 
-NTP_CRYPTO_RAND
+if test $USE_WOLFSSL = no; then
+    NTP_OPENSSL
 
-# if we are using OpenSSL (--with-crypto), by default Autokey is enabled
-AC_MSG_CHECKING([if we want to include NTP Autokey protocol support])
-AC_ARG_ENABLE(
-    [autokey],
-    AS_HELP_STRING(
-	[--enable-autokey],
-	[+ support NTP Autokey protocol]
-	),
-    [ntp_autokey=$enableval],
-    [ntp_autokey=$ntp_openssl]
-)
-case "$ntp_autokey" in
- no)
-    ;;
- *)
-    case "$ntp_openssl" in
-     no)
-	AC_MSG_WARN([Disabling Autokey, --enable-autokey requires --with-crypto.])
-	ntp_autokey=no
-	;;
-     *)
-	AC_DEFINE([AUTOKEY], [1], [Support NTP Autokey protocol?])
-	ntp_autokey=yes
-	;;
-    esac
-    ;;
-esac
-AC_MSG_RESULT([$ntp_autokey])
+	AC_MSG_CHECKING([if we want to enable CMAC support])
+	case "$ac_cv_header_openssl_cmac_h" in
+	 yes)
+	    AC_DEFINE([ENABLE_CMAC], [1], [Enable CMAC support?])
+	    ans="yes"
+	    ;;
+	 *) ans="no"
+	    ;;
+	esac
+	AC_MSG_RESULT([$ans])
+
+	NTP_CRYPTO_RAND
+
+	# if we are using OpenSSL (--with-crypto), by default Autokey is enabled
+	AC_MSG_CHECKING([if we want to include NTP Autokey protocol support])
+	AC_ARG_ENABLE(
+	    [autokey],
+	    AS_HELP_STRING(
+		[--enable-autokey],
+		[+ support NTP Autokey protocol]
+		),
+	    [ntp_autokey=$enableval],
+	    [ntp_autokey=$ntp_openssl]
+	)
+	case "$ntp_autokey" in
+	 no)
+	    ;;
+	 *)
+	    case "$ntp_openssl" in
+	     no)
+		AC_MSG_WARN([Disabling Autokey, --enable-autokey requires --with-crypto.])
+		ntp_autokey=no
+		;;
+	     *)
+		AC_DEFINE([AUTOKEY], [1], [Support NTP Autokey protocol?])
+		ntp_autokey=yes
+		;;
+	    esac
+	    ;;
+	esac
+	AC_MSG_RESULT([$ntp_autokey])
+fi
 
 AC_SUBST([MAKE_CHECK_LAYOUT])
 AC_MSG_CHECKING([if we want to run check-layout])
diff --git a/include/libssl_compat.h b/include/libssl_compat.h
index 2a3697c..2964515 100644
--- a/include/libssl_compat.h
+++ b/include/libssl_compat.h
@@ -20,6 +20,8 @@
 #ifndef NTP_LIBSSL_COMPAT_H
 #define NTP_LIBSSL_COMPAT_H
 
+#ifndef WITH_WOLFSSL
+
 #include "openssl/evp.h"
 #include "openssl/dsa.h"
 #include "openssl/rsa.h"
@@ -116,4 +118,6 @@ extern int	sslshim_X509_get_signature_nid(const X509 *x);
 #endif /* OPENSSL_VERSION_NUMBER < v1.1.0 */
 /* ----------------------------------------------------------------- */
 
+#endif /* !WITH_WOLFSSL */
+
 #endif /* NTP_LIBSSL_COMPAT_H */
diff --git a/include/ntp_crypto.h b/include/ntp_crypto.h
index 32134a8..6b3af65 100644
--- a/include/ntp_crypto.h
+++ b/include/ntp_crypto.h
@@ -19,11 +19,15 @@
 #define	CRYPTO_CONF_NID   9	/* specify digest name */
 
 #ifdef AUTOKEY
-#ifndef OPENSSL
+#if !defined(OPENSSL)
 #error AUTOKEY should be defined only if OPENSSL is.
 invalidsyntax: AUTOKEY should be defined only if OPENSSL is.
 #endif
 
+#ifdef WITH_WOLFSSL
+#include "wolfssl/options.h"
+#endif
+
 #include "openssl/bn.h"
 #include "openssl/evp.h"
 #include "ntp_calendar.h"	/* for fields in the cert_info structure */
diff --git a/include/ntp_md5.h b/include/ntp_md5.h
index 06c90b2..258c936 100644
--- a/include/ntp_md5.h
+++ b/include/ntp_md5.h
@@ -7,14 +7,17 @@
 #define NTP_MD5_H
 
 #ifdef OPENSSL
+#ifdef WITH_WOLFSSL
+# include <wolfssl/options.h>
+#endif /* WITH_WOLFSSL */
 # include <openssl/evp.h>
 # include "libssl_compat.h"
-# ifdef HAVE_OPENSSL_CMAC_H
+# if defined(HAVE_OPENSSL_CMAC_H) || (defined(WITH_WOLFSSL) && defined(WOLFSSL_CMAC))
 #  include <openssl/cmac.h>
 #  define CMAC                  "AES128CMAC"
 #  define AES_128_KEY_SIZE      16
-# endif /*HAVE_OPENSSL_CMAC_H*/
-#else	/* !OPENSSL follows */
+# endif /* HAVE_OPENSSL_CMAC_H || (WITH_WOLFSSL && WOLFSSL_CMAC) */
+#else /* !OPENSSL follows */
 /*
  * Provide OpenSSL-alike MD5 API if we're not using OpenSSL
  */
@@ -22,28 +25,28 @@
 #  include <md5.h>
 # else
 #  include "isc/md5.h"
-   typedef isc_md5_t		MD5_CTX;
-#  define MD5Init(c)		isc_md5_init(c)
-#  define MD5Update(c, p, s)	isc_md5_update(c, p, s)
-#  define MD5Final(d, c)	isc_md5_final((c), (d))	/* swapped */
+   typedef isc_md5_t    MD5_CTX;
+#  define MD5Init(c)    isc_md5_init(c)
+#  define MD5Update(c, p, s)  isc_md5_update(c, p, s)
+#  define MD5Final(d, c)  isc_md5_final((c), (d)) /* swapped */
 # endif
 
-  typedef MD5_CTX			EVP_MD_CTX;
+  typedef MD5_CTX     EVP_MD_CTX;
 
-# define EVP_MD_CTX_free(c)		free(c)
-# define EVP_MD_CTX_new()		calloc(1, sizeof(MD5_CTX))
-# define EVP_get_digestbynid(t)		NULL
-# define EVP_md5()			NULL
+# define EVP_MD_CTX_free(c)   free(c)
+# define EVP_MD_CTX_new()   calloc(1, sizeof(MD5_CTX))
+# define EVP_get_digestbynid(t)   NULL
+# define EVP_md5()      NULL
 # define EVP_MD_CTX_init(c)
 # define EVP_MD_CTX_set_flags(c, f)
-# define EVP_DigestInit(c, dt)		(MD5Init(c), 1)
-# define EVP_DigestInit_ex(c, dt, i)	(MD5Init(c), 1)
-# define EVP_DigestUpdate(c, p, s)	MD5Update(c, (const void *)(p), \
-						  s)
-# define EVP_DigestFinal(c, d, pdl)	\
-	do {				\
-		MD5Final((d), (c));	\
-		*(pdl) = 16;		\
-	} while (0)
-# endif	/* !OPENSSL */
-#endif	/* NTP_MD5_H */
+# define EVP_DigestInit(c, dt)    (MD5Init(c), 1)
+# define EVP_DigestInit_ex(c, dt, i)  (MD5Init(c), 1)
+# define EVP_DigestUpdate(c, p, s)  MD5Update(c, (const void *)(p), \
+              s)
+# define EVP_DigestFinal(c, d, pdl) \
+  do {        \
+    MD5Final((d), (c)); \
+    *(pdl) = 16;    \
+  } while (0)
+# endif /* !OPENSSL */
+#endif  /* NTP_MD5_H */
diff --git a/include/ntp_stdlib.h b/include/ntp_stdlib.h
index 265aafa..d4a098a 100644
--- a/include/ntp_stdlib.h
+++ b/include/ntp_stdlib.h
@@ -47,7 +47,7 @@ extern	int	xsbprintf(char**, char* const, char const*, ...) NTP_PRINTF(3, 4);
  * When building without OpenSSL, use a few macros of theirs to
  * minimize source differences in NTP.
  */
-#ifndef OPENSSL
+#if !defined(OPENSSL) && !defined(WITH_WOLFSSL)
 #define NID_md5	4	/* from openssl/objects.h */
 /* from openssl/evp.h */
 #define EVP_MAX_MD_SIZE	64	/* longest known is SHA512 */
diff --git a/libntp/a_md5encrypt.c b/libntp/a_md5encrypt.c
index 57100de..97906b0 100644
--- a/libntp/a_md5encrypt.c
+++ b/libntp/a_md5encrypt.c
@@ -107,7 +107,7 @@ make_mac(
 			goto mac_fail;
 		}
 		
-           #ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+           #if defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW) && !defined(WITH_WOLFSSL)
 		/* make sure MD5 is allowd */
 		EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
            #endif
@@ -263,7 +263,7 @@ addr2refid(sockaddr_u *addr)
 	INIT_SSL();
 
 	ctx = EVP_MD_CTX_new();
-#   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+#	if defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW) && !defined(WITH_WOLFSSL)
 	/* MD5 is not used as a crypto hash here. */
 	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
 #   endif
diff --git a/libntp/libssl_compat.c b/libntp/libssl_compat.c
index 5527682..3a3ab79 100644
--- a/libntp/libssl_compat.c
+++ b/libntp/libssl_compat.c
@@ -17,6 +17,7 @@
 #include "config.h"
 #include "ntp_types.h"
 
+#ifndef WITH_WOLFSSL
 /* ----------------------------------------------------------------- */
 #ifdef OPENSSL
 # include <string.h>
@@ -339,3 +340,5 @@ NONEMPTY_TRANSLATION_UNIT
 /* ----------------------------------------------------------------- */
 #endif
 /* ----------------------------------------------------------------- */
+
+#endif /* !WITH_WOLFSSL */
diff --git a/libntp/ntp_crypto_rnd.c b/libntp/ntp_crypto_rnd.c
index 2a4f91a..9ba69b6 100644
--- a/libntp/ntp_crypto_rnd.c
+++ b/libntp/ntp_crypto_rnd.c
@@ -19,6 +19,9 @@
 #include "safecast.h"
 
 #ifdef USE_OPENSSL_CRYPTO_RAND
+#ifdef WITH_WOLFSSL
+#include <wolfssl/options.h>
+#endif
 #include <openssl/err.h>
 #include <openssl/rand.h>
 
diff --git a/libntp/ssl_init.c b/libntp/ssl_init.c
index 9258932..5c53ec7 100644
--- a/libntp/ssl_init.c
+++ b/libntp/ssl_init.c
@@ -18,11 +18,11 @@
 # include <openssl/evp.h>
 # include <openssl/opensslv.h>
 # include "libssl_compat.h"
-# ifdef HAVE_OPENSSL_CMAC_H
+# if defined(HAVE_OPENSSL_CMAC_H) || (defined(WITH_WOLFSSL) && defined(WOLFSSL_CMAC))
 #  include <openssl/cmac.h>
 #  define CMAC_LENGTH	16
 #  define CMAC		"AES128CMAC"
-# endif /*HAVE_OPENSSL_CMAC_H*/
+# endif /* HAVE_OPENSSL_CMAC_H || (WITH_WOLFSSL && WOLFSSL_CMAC) */
 int ssl_init_done;
 
 #if OPENSSL_VERSION_NUMBER < 0x10100000L
diff --git a/ntpd/ntp_control.c b/ntpd/ntp_control.c
index 9c40803..eda1d12 100644
--- a/ntpd/ntp_control.c
+++ b/ntpd/ntp_control.c
@@ -3666,7 +3666,7 @@ static u_int32 derive_nonce(
 	}
 
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
+#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW) && !defined(WITH_WOLFSSL)
 	/* [Bug 3457] set flags and don't kill them again */
 	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
 	EVP_DigestInit_ex(ctx, EVP_get_digestbynid(NID_md5), NULL);
diff --git a/ntpd/ntp_crypto.c b/ntpd/ntp_crypto.c
index 2f82c4c..c607757 100644
--- a/ntpd/ntp_crypto.c
+++ b/ntpd/ntp_crypto.c
@@ -268,7 +268,7 @@ session_key(
 		break;
 	}
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
+#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW) && !defined(WITH_WOLFSSL)
 	/* [Bug 3457] set flags and don't kill them again */
 	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
 	EVP_DigestInit_ex(ctx, EVP_get_digestbynid(crypto_nid), NULL);
@@ -2094,7 +2094,7 @@ bighash(
 	ptr = emalloc(len);
 	BN_bn2bin(bn, ptr);
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
+#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW) && !defined(WITH_WOLFSSL)
 	/* [Bug 3457] set flags and don't kill them again */
 	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
 	EVP_DigestInit_ex(ctx, EVP_md5(), NULL);
@@ -2963,7 +2963,11 @@ crypto_bob3(
 	while (1) {
 		BN_rand(k, BN_num_bits(q), 0, 0);
 		BN_mod(k, k, q, bctx);
+	#ifdef WITH_WOLFSSL
+		BN_gcd(u, k, (BIGNUM*)q, bctx);
+	#else
 		BN_gcd(u, k, q, bctx);
+	#endif
 		if (BN_is_one(u))
 			break;
 	}
@@ -3560,8 +3564,13 @@ cert_parse(
 		 */
 		case NID_subject_key_identifier:
 			data = X509_EXTENSION_get_data(ext);
+		#ifdef WITH_WOLFSSL
+			ret->grpkey = BN_bin2bn((const unsigned char*)&data->data[2],
+				data->length - 2, NULL);
+		#else
 			ret->grpkey = BN_bin2bn(&data->data[2],
-			    data->length - 2, NULL);
+				data->length - 2, NULL);
+		#endif
 			/* fall through */
 		default:
 			DPRINTF(1, ("cert_parse: %s\n",
diff --git a/ntpq/ntpq.c b/ntpq/ntpq.c
index 0382c0f..ba49995 100644
--- a/ntpq/ntpq.c
+++ b/ntpq/ntpq.c
@@ -42,10 +42,10 @@
 #  endif
 # endif
 # include "libssl_compat.h"
-# ifdef HAVE_OPENSSL_CMAC_H
+# if defined(HAVE_OPENSSL_CMAC_H) || (defined(WITH_WOLFSSL) && defined(WOLFSSL_CMAC))
 #  include <openssl/cmac.h>
 #  define CMAC "AES128CMAC"
-# endif
+# endif /* HAVE_OPENSSL_CMAC_H || (WITH_WOLFSSL && WOLFSSL_CMAC) */
 #endif
 #include <ssl_applink.c>
 
diff --git a/sntp/configure.ac b/sntp/configure.ac
index f6de8a1..2e3e00b 100644
--- a/sntp/configure.ac
+++ b/sntp/configure.ac
@@ -1,4 +1,4 @@
-dnl SNTP subpackage configure.ac			-*- Autoconf -*-
+dnl SNTP subpackage configure.ac            -*- Autoconf -*-
 dnl
 m4_include([m4/version.m4])
 AC_PREREQ([2.68])
@@ -125,7 +125,11 @@ NTP_FACILITYNAMES
 # Checks for typedefs, structures, and compiler characteristics.
 AC_HEADER_STDBOOL
 
-NTP_OPENSSL
+NTP_WOLFSSL
+if test $USE_WOLFSSL = no; then
+    NTP_OPENSSL
+fi
+
 NTP_IPV6
 
 ###
diff --git a/sntp/crypto.c b/sntp/crypto.c
index 8a47ede..de68179 100644
--- a/sntp/crypto.c
+++ b/sntp/crypto.c
@@ -85,7 +85,7 @@ compute_mac(
 			goto mac_fail;
 		}
 #ifdef OPENSSL	/* OpenSSL 1 supports return codes 0 fail, 1 okay */
-#	    ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+#	    if defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW) && !defined(WITH_WOLFSSL)
 		EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
 #	    endif
 		/* [Bug 3457] DON'T use plain EVP_DigestInit! It would
diff --git a/sntp/m4/ntp_wolfssl.m4 b/sntp/m4/ntp_wolfssl.m4
new file mode 100644
index 0000000..95ed702
--- /dev/null
+++ b/sntp/m4/ntp_wolfssl.m4
@@ -0,0 +1,22 @@
+AC_DEFUN([NTP_WOLFSSL], [
+AC_ARG_WITH(wolfssl,
+    AC_HELP_STRING([--with-wolfssl=DIR],[location of wolfssl]),
+[
+    CPPFLAGS_NTP="$CPPFLAGS_NTP -I${withval}/include/ -I${withval}/include/wolfssl"
+    LDADD_NTP="$LDADD_NTP -L${withval}/lib -lwolfssl"
+    USE_WOLFSSL=yes
+],[USE_WOLFSSL=no])
+
+if test $USE_WOLFSSL = yes; then
+    AC_CHECK_HEADER([wolfssl/options.h])
+    if test $ac_cv_header_wolfssl_options_h = yes; then
+        AC_DEFINE([OPENSSL], [], [Use OpenSSL?])
+        AC_DEFINE([WITH_WOLFSSL], [], [Use wolfSSL?])
+        AC_DEFINE([ENABLE_CMAC], [1], [Enable CMAC support?])
+        AC_DEFINE([USE_OPENSSL_CRYPTO_RAND], [1], [Use OpenSSL's crypto random functions?])
+        AC_DEFINE([AUTOKEY], [1], [Support NTP Autokey protocol?])
+    else
+        AC_MSG_ERROR([Unable to find wolfssl.])
+    fi
+fi
+])
diff --git a/tests/libntp/a_md5encrypt.c b/tests/libntp/a_md5encrypt.c
index 844be16..3a3d621 100644
--- a/tests/libntp/a_md5encrypt.c
+++ b/tests/libntp/a_md5encrypt.c
@@ -2,6 +2,9 @@
 #include "unity.h"
 
 #ifdef OPENSSL
+#ifdef WITH_WOLFSSL
+#include <wolfssl/options.h>
+#endif /* WITH_WOLFSSL */
 # include "openssl/err.h"
 # include "openssl/rand.h"
 # include "openssl/evp.h"
diff --git a/util/ntp-keygen.c b/util/ntp-keygen.c
index eb2cb34..cc43c97 100644
--- a/util/ntp-keygen.c
+++ b/util/ntp-keygen.c
@@ -2191,20 +2191,29 @@ genRsaKeyPair(
 	)
 {
 	RSA *		rsa = RSA_new();
-	BN_GENCB *	gcb = BN_GENCB_new();
 	BIGNUM *	bne = BN_new();
+#ifndef WITH_WOLFSSL
+	BN_GENCB *	gcb = BN_GENCB_new();
 	
 	if (gcb)
 		BN_GENCB_set_old(gcb, cb, what);
+#endif
 	if (bne)
 		BN_set_word(bne, 65537);
+#ifdef WITH_WOLFSSL
+	if (!(rsa && bne && RSA_generate_key_ex(
+		      rsa, bits, bne, NULL)))
+#else
 	if (!(rsa && gcb && bne && RSA_generate_key_ex(
 		      rsa, bits, bne, gcb)))
+#endif
 	{
 		RSA_free(rsa);
 		rsa = NULL;
 	}
+#ifndef WITH_WOLFSSL
 	BN_GENCB_free(gcb);
+#endif
 	BN_free(bne);
 	return rsa;
 }
@@ -2217,19 +2226,28 @@ genDsaParams(
 {
 	
 	DSA *		dsa = DSA_new();
-	BN_GENCB *	gcb = BN_GENCB_new();
 	u_char		seed[20];
+#ifndef WITH_WOLFSSL
+	BN_GENCB *	gcb = BN_GENCB_new();
 	
 	if (gcb)
 		BN_GENCB_set_old(gcb, cb, what);
+#endif
 	RAND_bytes(seed, sizeof(seed));
+#ifdef WITH_WOLFSSL
+	if (!(dsa && DSA_generate_parameters_ex(
+		      dsa, bits, seed, sizeof(seed), NULL, NULL, NULL)))
+#else
 	if (!(dsa && gcb && DSA_generate_parameters_ex(
 		      dsa, bits, seed, sizeof(seed), NULL, NULL, gcb)))
+#endif
 	{
 		DSA_free(dsa);
 		dsa = NULL;
 	}
+#ifndef WITH_WOLFSSL
 	BN_GENCB_free(gcb);
+#endif
 	return dsa;
 }
 
